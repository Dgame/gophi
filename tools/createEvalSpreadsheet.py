#!/usr/local/bin/python3
# coding=utf-8

import io,re,datetime,sys,os.path,random

from calculatebleu import BLEU

from openpyxl import Workbook
from openpyxl.styles import Alignment,Font,PatternFill
from openpyxl.styles.borders import Border, Side

systems=["gophi","isiMT","jamr"]
bleus={}

linkPat=r'<a[^>]+>(.*?)</a>' # generated by gophi
unknownPat=r'\[\[(.*?)\]\]'  # generated by gophi
wikiPat=r' :wiki [^ ]+'    # generated by isiMT

def clean(ins):
    ins1=re.sub(wikiPat,'',re.sub(unknownPat,r'\1',re.sub(linkPat,r'\1',ins)))
    return ins if ins==ins1 else clean(ins1) # links can be embedded 

def c(ws,r,c,v,style=None,nbFmt=None,font=None):
    cell=ws.cell(row=r,column=c,value=v)
    cell.alignment = Alignment(wrapText=True,vertical="top")
    if style!=None:
        cell.style=style
    if nbFmt!=None:
        cell.number_format=nbFmt
    if font!=None:
        cell.font=font
    return cell

fillPat = PatternFill(start_color="D8FFFE", end_color="D8FFFE", fill_type = "solid")
bordureNoire=Border(bottom = Side(border_style='thin', color='000000'),
                    right = Side(border_style='thin', color='CACACA'))
bordureGrise=Border(bottom = Side(border_style='thin', color='CACACA'),
                    right = Side(border_style='thin', color='CACACA'))
center=Alignment(horizontal="center",vertical="top")
def griser(ws,r1,r2):
    for row in range(r1,r2+1):
        for cell in ws["%d:%d"%(row,row)]:
            cell.fill=fillPat
            cell.border=bordureGrise


def createExcelWB(amrs,bleus): 
    wb = Workbook()
    ws = wb.active
    courier10=Font(name='courier',size=10)
    bold=Font(bold=True)
    c(ws,1,1,"Id",font=bold).alignment=center
    ws.column_dimensions["A"].width=10
    c(ws,1,2,"System",font=bold).alignment=center
    ws.column_dimensions["B"].width=10
    c(ws,1,3,"AMR",font=bold).alignment=center
    ws.column_dimensions["C"].width=80
    c(ws,1,4,"Generated",font=bold).alignment=center
    ws.column_dimensions["D"].width=40
    c(ws,1,5,"Score",font=bold).alignment=center
    ws.column_dimensions["E"].width=10
    c(ws,1,6,"Comment",font=bold).alignment=center
    ws.column_dimensions["F"].width=20
    c(ws,1,7,"Evaluated",font=bold).alignment=center
    ws.column_dimensions["G"].width=10
    
    r=2
    isGrey=False
    for amr in amrs:
        random.shuffle(systems)
        c(ws,r,1,amr["id"])
        c(ws,r,2,systems[0])
        c(ws,r,3,amr["snt"].rstrip(),font=bold)
        c(ws,r,4,clean(amr[systems[0]]))
        c(ws,r,5,"").alignment=center
        c(ws,r,7,'=OR(E%d<>"",E%d<>"",E%d<>"")'%(r,r+1,r+2))
        r+=1
        c(ws,r,1,amr["id"])
        c(ws,r,2,systems[1])
        c(ws,r,4,clean(amr[systems[1]]))
        c(ws,r,5,"").alignment=center
        amrText=amr["AMR"].rstrip()
        r+=1
        c(ws,r,1,amr["id"])
        c(ws,r,2,systems[2])
        c(ws,r-1,3,amrText,font=courier10)
        ws.merge_cells(start_row=r-1, start_column=3, end_row=r, end_column=3)
        ws.row_dimensions[r].height=amrText.count("\n")*12
        c(ws,r,4,clean(amr[systems[2]]))
        c(ws,r,5,"").alignment=center
        if isGrey:griser(ws,r-2,r)
        isGrey=not isGrey
        for cell in ws["%d:%d"%(r,r)]:
            cell.border=bordureNoire
        r+=1
    last=r-1
    r+=1
    c(ws,r,4,"BLEU")
    c(ws,r,5,"NB Best")
    systems.sort()
    for system in systems:
        r+=1
        c(ws,r,3,system,font=bold)
        c(ws,r,4,bleus[system],nbFmt="0.00")
        c(ws,r,5,'=COUNTIFS(E$2:E$%d,"<>"&"",B$2:B$%d,"%s")'%(last,last,system))
        c(ws,r,6,"=E%d/E%d"%(r,last+6),"Percent","0%")
    r+=1
    c(ws,r,4,"Nb Best")
    c(ws,r,5,"=SUM(E%d:E%d)"%(r-4,r-1))
    r+=1
    c(ws,r,4,"Nb AMR evaluated")
    c(ws,r,5,'=COUNTIF(G$2:G$%d,TRUE)'%last)
    r+=1
    c(ws,r,4,"Nb AMR yet to evaluate")
    c(ws,r,5,'=COUNTIF(G$2:G$%d,FALSE)'%last)
    r+=1
    dateTime=datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    c(ws,r,3,"Created: "+dateTime)
    
    ws.column_dimensions["A"].hidden=True
    ws.column_dimensions["B"].hidden=True
    ws.column_dimensions["G"].hidden=True
    ws.freeze_panes=ws["A2"]                    # figer la première ligne
    ws.auto_filter.ref=("A1:F%d"%last)          # ajouter les filtres sur la première ligne
    return wb

specialPat=re.compile(r'^# ::(gophi|snt|id|basegen) ?(.*)')

def getAMRs(fileName):
    amrs=[]
    amr={"AMR":""}
    with open(fileName,encoding="utf-8") as fp:  
        line = fp.readline()
        while len(line)>0:
            line=line.rstrip()
            if len(line)==0:
                if len(amr["AMR"])>0:
                    amrs.append(amr)
                    amr={"AMR":""}
            else: 
                m=specialPat.match(line)
                if m:
                    if m.group(1)=="id":
                        amr["id"]=m.group(2).split()[0]
                    else:
                        amr[m.group(1)]=m.group(2) if len(m.group(2))>0 else "*no text*"
                elif line[0]!="#":
                    amr["AMR"]+=line+"\n"
            line = fp.readline()
    return amrs

def showStatistics(amrs,system):
    candidate=[]
    reference=[]
    nbGenWords=0
    nbOriginalWords=0
    for amr in amrs:
        # print(amr)
        generated=clean(amr[system])
        nbGenWords+=len(generated.split())
        candidate.append(generated)
        reference.append(amr["snt"])
        nbOriginalWords+=len(amr["snt"].split())
        # print("%d: %s"%compareLevenshtein(amr['Original'], generated))
    bleus[system]=BLEU(candidate,[reference])
    nb=len(candidate)
    print(system+": %d examples, BLEU:%5.3f"%(nb,bleus[system]))
    print(system+": mean length of original sentence:%5.2f"%(nbOriginalWords/nb))
    print(system+": mean length of generated sentence:%5.2f"%(nbGenWords/nb))

if __name__ == '__main__':
    if len(sys.argv)>1:
        fileName=sys.argv[1];
    else: # for unit testing 
        fileName="/Users/lapalme/Dropbox/PourOrigene/AMR/amr-ISI/eval/gophi/amr-examples-25.out"
    ## get AMRs from the ...gophi.out
    print("reading:"+fileName)
    amrs=getAMRs(fileName)
    (dirN,fileN)=os.path.split(fileName)
    (root,ext)=os.path.splitext(fileN)
    fileFMT="%s/%s"
    # get ISI-MT translations and merge info into amrs
    isiMTfileName=fileFMT%(dirN.replace("gophi","isiMT"),fileN)
    print("reading:"+isiMTfileName)
    isiMTF=open(isiMTfileName)
    for i in range(0,len(amrs)):
        amrs[i]["isiMT"]=isiMTF.readline().rstrip()
    # get JAMR translations  and merge info into amrs
    jamrFileName=fileFMT%(dirN.replace("gophi","jamr"),fileN.replace(".out",".txt")+".out")
    print("reading:"+jamrFileName)
    jamrF=open(jamrFileName)
    for i in range(0,len(amrs)):
        amrs[i]["jamr"]=jamrF.readline().rstrip()
    import pprint
    # pprint.pprint(amrs)
    showStatistics(amrs,"gophi")
    showStatistics(amrs,"isiMT")
    showStatistics(amrs,"jamr")
    # ## générer la feuille excel pour l'évaluation
    wb=createExcelWB(amrs,bleus)
    excelFN=os.path.join(dirN.replace("/gophi",""),fileN.replace(".out",".xlsx"))
    wb.save(excelFN)
    print(excelFN+" created")

